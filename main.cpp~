//g++ main.cpp -o 3d -lglut -lGL -lGLU

#include <GL/glut.h>

#define SENS_ROT 5.0
#define SENS_OBS 20.0
#define SENS_TRANSL 30.0

bool orto = true;
float win = 10.0f;
float aspecto;
float angulo = 60.0f;
bool eixos = true;
bool wire = true;
int objeto = 0;

//Mouse
GLfloat rotX=0.0, rotY=0.0, rotX_ini, rotY_ini;
GLfloat obsX=0.0, obsY=0.0, obsZ=5.0, obsX_ini, obsY_ini,obsZ_ini;
int x_ini, y_ini, bot;

//CallBack's
void display();
void reshape(GLsizei w,GLsizei h);
void projecao();
void keyboard( unsigned char tecla, int x, int y );
void desenhaEixos();
void mouse( int button, int state, int x, int y );   
void motion( int x, int y );
void formas();

int main( int argc, char *argv[]){
    
    glutInit( &argc, argv );
    glutInitDisplayMode( GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGB);
    glutInitWindowSize( 500, 500);
    glutCreateWindow( "IST ICG - Pratica 3D" );
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutMotionFunc(motion);
    glutMainLoop();
    
return 0;
}

void display(){
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
     if( eixos ) {
         desenhaEixos();
     }
     formas();
     glutSwapBuffers();
}

void reshape( GLsizei w, GLsizei h ){
     if(h == 0) h = 1;
     glViewport(0, 0, w, h);
     aspecto = (float) w/h;
     projecao();
}

void projecao(){
     
     glMatrixMode( GL_PROJECTION );
     glLoadIdentity();
     if( orto ){
         glOrtho( -win*aspecto, win*aspecto, -win, win, -win, win );
     } else {
         gluPerspective( angulo, aspecto, 0.0f, 1000.0f );
     }
     glMatrixMode( GL_MODELVIEW );
     glLoadIdentity();
     gluLookAt(obsX,obsY,obsZ,0.0, 0.0, 0.0, 0.0, 1.0, 0.0 );
}

void keyboard( unsigned char tecla, int x, int y ){
     switch (tecla){
            case 27: exit(0); break;
            case 'a':
            case 'A':eixos = !eixos; break;
            case 'p':
            case 'P': orto = false ; projecao(); break;
            case 'o':
            case 'O': orto = true; projecao(); break;
            case 'w':
            case 'W': wire = !wire; break;
            case '1': objeto = 1; break;
            case '2': objeto = 2;break;
     }
     glutPostRedisplay();
}

void desenhaEixos(){
     glLineWidth( 2.0f );
     glBegin( GL_LINES );
              
              glColor3f(1.0f, 0.0f, 0.0f);
              glVertex3f(0.0f, 0.0f, 0.0f);
              glVertex3f(2.0f, 0.0f, 0.0f);
              
              glColor3f(0.0f, 1.0f, 0.0f);
              glVertex3f(0.0f, 0.0f, 0.0f);
              glVertex3f(0.0f, 2.0f, 0.0f);
              
              glColor3f (0.0f, 0.0f, 1.0f);
              glVertex3f(0.0f, 0.0f, 0.0f);
              glVertex3f(0.0f, 0.0f, 2.0f);
     glEnd();
}

void mouse( int button, int state, int x, int y ){
     if( state == GLUT_DOWN ) {
         x_ini = x;
         y_ini = y;
         obsX_ini = obsX;
         obsY_ini = obsY;
         obsZ_ini = obsZ;
         rotX_ini = rotX;
         rotY_ini = rotY;
         bot = button;
    }else 
          bot = -1;
}

void motion( int x, int y ) {
     if( bot == GLUT_LEFT_BUTTON ){
         int deltax = x_ini - x;
         int deltay = y_ini - y;
         rotY = rotY_ini - deltax/SENS_ROT;
         rotX = rotX_ini - deltay/SENS_ROT;
     }else if( bot == GLUT_RIGHT_BUTTON ){
           int deltaz = y_ini - y;
           obsZ = obsZ_ini + deltaz/SENS_OBS;
     }else if( bot == GLUT_MIDDLE_BUTTON ){
           int deltax = x_ini - x;
           int deltay = y_ini - y;
           obsX = obsX_ini + deltax/SENS_TRANSL;
           obsY = obsY_ini - deltay/SENS_TRANSL;
     }
     glMatrixMode( GL_MODELVIEW );
     glLoadIdentity();
     glTranslatef( -obsX, -obsY, -obsZ );
     glRotatef( rotX, 1, 0, 0 );
     glRotatef( rotY, 0, 1, 0 );
     glutPostRedisplay();
}

void formas(){
     switch (objeto){
     case 1:
          if( wire ){ glutWireSphere ( 2 , 10 , 10 ); }
          else{ glutSolidSphere( 2 , 10 , 10 ); }
          break;
     case 2:
          if( wire ){ glutWireCube ( 2 ); }
          else{ glutSolidCube( 2 ); }
          break;
     }
}
